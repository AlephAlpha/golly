                        /*** /

This file is part of Golly, a Game of Life Simulator.
Copyright (C) 2008 Andrew Trevorrow and Tomas Rokicki.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

 Web site:  http://sourceforge.net/projects/golly
 Authors:   rokicki@gmail.com  andrew@trevorrow.com

                        / ***/
#include "jvnalgo.h"

using namespace std ;

const int NORTH = 1 ;
const int SOUTH = 3 ;
const int EAST = 0 ;
const int WEST = 2 ;
const int FLIPDIR = 2 ;
const int DIRMASK = 3 ;
const int CONF = 0x10 ;
const int OTRANS = 0x20 ;
const int STRANS = 0x40 ;
const int TEXC = 0x80 ;
const int CDEXC = 0x80 ;
const int CEXC = 1 ;
const int BIT_OEXC = 1 ;
const int BIT_SEXC = 2 ;
const int BIT_ONEXC = 4 ;
const int BIT_CEXC = 8 ;
static state compress[256] ;

/**
 *   These are the legal *internal* states.
 */
static state uncompress[] = { 0, /* dead */
			      1, 2, 3, 4, 5, 6, 7, 8, /* construction states */
			      32, 33, 34, 35, /* ordinary */
			      160, 161, 162, 163, /* ordinary active */
			      64, 65, 66, 67, /* special */
			      192, 193, 194, 195, /* special active */
			      16, 144, /* confluent state */
			      17, 145, /* more confluent state */
} ;

static int bits(state mcode, state code, state dir) {
   if (code & (TEXC | OTRANS | CONF | CEXC) == 0)
      return 0 ;
   if (code & CONF) {
      if ((mcode & (OTRANS | STRANS)) && ((mcode & DIRMASK) ^ FLIPDIR) == dir)
         return 0 ;
      if (code & 1)
         return BIT_CEXC ;
   } else {
      if ((code & DIRMASK) != dir)
         return 0 ;
      if (code & OTRANS) {
         if (code & TEXC)
            return BIT_OEXC ;
         return BIT_ONEXC ;
      } else if ((code & (STRANS | TEXC)) == (STRANS | TEXC))
         return BIT_SEXC ;
   }
   return 0 ;
}

static state cres[] = {0x22, 0x23, 0x40, 0x41, 0x42, 0x43, 0x10, 0x20, 0x21} ;

jvnalgo::jvnalgo() {
  for (int i=0; i<256; i++)
    compress[i] = 255 ;
  for (unsigned int i=0; i<sizeof(uncompress)/sizeof(uncompress[0]); i++)
    compress[uncompress[i]] = i ;
}

jvnalgo::~jvnalgo() {
}

state jvnalgo::slowcalc(state, state n, state, state w, state c, state e,
			state, state s, state) {
  c = uncompress[c] ;
  int mbits = bits(c, uncompress[n], SOUTH) | bits(c, uncompress[w], EAST) |
               bits(c, uncompress[e], WEST) | bits(c, uncompress[s], NORTH) ;
   if (c < CONF) {
      if (mbits & (BIT_OEXC | BIT_SEXC))
         c = 2 * c + 1 ;
      else
         c = 2 * c ;
      if (c > 8)
         c = cres[c-9] ;
   } else if (c & CONF) {
      if (mbits & BIT_SEXC)
         c = 0 ;
      else if ((mbits & (BIT_OEXC | BIT_ONEXC)) == BIT_OEXC)
         c = ((c & CDEXC) >> 7) + (CDEXC | CONF) ;
      else
         c = ((c & CDEXC) >> 7) + CONF ;
   } else {
      if (((c & OTRANS) && (mbits & BIT_SEXC)) ||
          ((c & STRANS) && (mbits & BIT_OEXC)))
         c = 0 ;
      else if (mbits & (BIT_SEXC | BIT_OEXC | BIT_CEXC))
         c |= 128 ;
      else
         c &= 127 ;
   }
   return compress[c] ;
}

// XPM data for the 32 7x7 icons used in JvN algo
static char* jvn7x7[] = {
// width height ncolors chars_per_pixel
"7 217 9 1",
// colors
"A c #FFFFFFFFFFFF",
"B c #FFFFFFFF0000",
"C c #FFFFA5A54242",
"D c #FFFF0000FFFF",
"E c #FFFF00000000",
"F c #A5A5A5A58484",
"G c #0000FFFFFFFF",
"H c #00009494FFFF",
"I c #000000000000",    // black will become transparent
// pixels
"IIEEEII",
"IEEEEEI",
"EEEEEEE",
"EEEEEEE",
"EEEEEEE",
"IEEEEEI",
"IIEEEII",
"IIBBBII",
"IBBBBBI",
"BBBBBBB",
"IIIIIII",
"EEEEEEE",
"IEEEEEI",
"IIEEEII",
"IIEEEII",
"IEEEEEI",
"EEEEEEE",
"IIIIIII",
"BBBBBBB",
"IBBBBBI",
"IIBBBII",
"IIBIBII",
"IBBIBBI",
"BBBIBBB",
"IIIIIII",
"EEEIEEE",
"IEEIEEI",
"IIEIEII",
"IIBIEII",
"IBBIEEI",
"BBBIEEE",
"IIIIIII",
"EEEIBBB",
"IEEIBBI",
"IIEIBII",
"IIEIBII",
"IEEIBBI",
"EEEIBBB",
"IIIIIII",
"BBBIEEE",
"IBBIEEI",
"IIBIEII",
"IIEIEII",
"IEEIEEI",
"EEEIEEE",
"IIIIIII",
"BBBIBBB",
"IBBIBBI",
"IIBIBII",
"IIBIBII",
"IBBIBBI",
"BBBIBBB",
"IIIIIII",
"BBBIBBB",
"IBBIBBI",
"IIBIBII",
"IIIIIII",
"IIIIHII",
"IIIIHHI",
"HHHHHHH",
"IIIIHHI",
"IIIIHII",
"IIIIIII",
"IIIHIII",
"IIHHHII",
"IHHHHHI",
"IIIHIII",
"IIIHIII",
"IIIHIII",
"IIIHIII",
"IIIIIII",
"IIHIIII",
"IHHIIII",
"HHHHHHH",
"IHHIIII",
"IIHIIII",
"IIIIIII",
"IIIHIII",
"IIIHIII",
"IIIHIII",
"IIIHIII",
"IHHHHHI",
"IIHHHII",
"IIIHIII",
"IIIIIII",
"IIIIGII",
"IIIIGGI",
"GGGGGGG",
"IIIIGGI",
"IIIIGII",
"IIIIIII",
"IIIGIII",
"IIGGGII",
"IGGGGGI",
"IIIGIII",
"IIIGIII",
"IIIGIII",
"IIIGIII",
"IIIIIII",
"IIGIIII",
"IGGIIII",
"GGGGGGG",
"IGGIIII",
"IIGIIII",
"IIIIIII",
"IIIGIII",
"IIIGIII",
"IIIGIII",
"IIIGIII",
"IGGGGGI",
"IIGGGII",
"IIIGIII",
"IIIIIII",
"IIIIEII",
"IIIIEEI",
"EEEEEEE",
"IIIIEEI",
"IIIIEII",
"IIIIIII",
"IIIEIII",
"IIEEEII",
"IEEEEEI",
"IIIEIII",
"IIIEIII",
"IIIEIII",
"IIIEIII",
"IIIIIII",
"IIEIIII",
"IEEIIII",
"EEEEEEE",
"IEEIIII",
"IIEIIII",
"IIIIIII",
"IIIEIII",
"IIIEIII",
"IIIEIII",
"IIIEIII",
"IEEEEEI",
"IIEEEII",
"IIIEIII",
"IIIIIII",
"IIIIDII",
"IIIIDDI",
"DDDDDDD",
"IIIIDDI",
"IIIIDII",
"IIIIIII",
"IIIDIII",
"IIDDDII",
"IDDDDDI",
"IIIDIII",
"IIIDIII",
"IIIDIII",
"IIIDIII",
"IIIIIII",
"IIDIIII",
"IDDIIII",
"DDDDDDD",
"IDDIIII",
"IIDIIII",
"IIIIIII",
"IIIDIII",
"IIIDIII",
"IIIDIII",
"IIIDIII",
"IDDDDDI",
"IIDDDII",
"IIIDIII",
"IIIFIII",
"IIFFFII",
"IFFIFFI",
"FFIIIFF",
"IFFIFFI",
"IIFFFII",
"IIIFIII",
"IIICIII",
"IICCCII",
"ICCICCI",
"CCIIICC",
"ICCICCI",
"IICCCII",
"IIICIII",
"IIIBIII",
"IIBBBII",
"IBBBBBI",
"BBBIBBB",
"IBBBBBI",
"IIBBBII",
"IIIBIII",
"IIIAIII",
"IIAAAII",
"IAAAAAI",
"AAAAAAA",
"IAAAAAI",
"IIAAAII",
"IIIAIII",
"IIIAIII",
"IIAIAII",
"IAAIAAI",
"AAAIAAA",
"IAAIAAI",
"IIAIAII",
"IIIAIII",
"IIIAIII",
"IIAAAII",
"IAAAAAI",
"AIIIIIA",
"IAAAAAI",
"IIAAAII",
"IIIAIII",
"IIIAIII",
"IIAAAII",
"IAIAIAI",
"AAAIAAA",
"IAIAIAI",
"IIAAAII",
"IIIAIII"
};

// XPM data for the 32 15x15 icons used in JvN algo
static char *jvn15x15[] = {
// width height ncolors chars_per_pixel
"15 465 9 1",
// colors
"A c #FFFFFFFFFFFF",
"B c #FFFFFFFF0000",
"C c #FFFFA5A54242",
"D c #FFFF0000FFFF",
"E c #FFFF00000000",
"F c #A5A5A5A58484",
"G c #0000FFFFFFFF",
"H c #00009494FFFF",
"I c #000000000000",    // black will become transparent
// pixels
"IIIIIIIIIIIIIII",
"IIIIIIEEEIIIIII",
"IIIIEEEEEEEIIII",
"IIIEEEEEEEEEIII",
"IIEEEEEEEEEEEII",
"IIEEEEEEEEEEEII",
"IEEEEEEEEEEEEEI",
"IEEEEEEEEEEEEEI",
"IEEEEEEEEEEEEEI",
"IIEEEEEEEEEEEII",
"IIEEEEEEEEEEEII",
"IIIEEEEEEEEEIII",
"IIIIEEEEEEEIIII",
"IIIIIIEEEIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIBBBIIIIII",
"IIIIIBBBBBIIIII",
"IIIIBBBBBBBIIII",
"IIIBBBBBBBBBIII",
"IIBBBBBBBBBBBII",
"IBBBBBBBBBBBBBI",
"IIIIIIIIIIIIIII",
"IEEEEEEEEEEEEEI",
"IIEEEEEEEEEEEII",
"IIIEEEEEEEEEIII",
"IIIIEEEEEEEIIII",
"IIIIIEEEEEIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIEEEEEIIIII",
"IIIIEEEEEEEIIII",
"IIIEEEEEEEEEIII",
"IIEEEEEEEEEEEII",
"IEEEEEEEEEEEEEI",
"IIIIIIIIIIIIIII",
"IBBBBBBBBBBBBBI",
"IIBBBBBBBBBBBII",
"IIIBBBBBBBBBIII",
"IIIIBBBBBBBIIII",
"IIIIIBBBBBIIIII",
"IIIIIIBBBIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIBIBIIIIII",
"IIIIIBBIBBIIIII",
"IIIIBBBIBBBIIII",
"IIIBBBBIBBBBIII",
"IIBBBBBIBBBBBII",
"IBBBBBBIBBBBBBI",
"IIIIIIIIIIIIIII",
"IEEEEEEIEEEEEEI",
"IIEEEEEIEEEEEII",
"IIIEEEEIEEEEIII",
"IIIIEEEIEEEIIII",
"IIIIIEEIEEIIIII",
"IIIIIIEIEIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIBIEIIIIII",
"IIIIIBBIEEIIIII",
"IIIIBBBIEEEIIII",
"IIIBBBBIEEEEIII",
"IIBBBBBIEEEEEII",
"IBBBBBBIEEEEEEI",
"IIIIIIIIIIIIIII",
"IEEEEEEIBBBBBBI",
"IIEEEEEIBBBBBII",
"IIIEEEEIBBBBIII",
"IIIIEEEIBBBIIII",
"IIIIIEEIBBIIIII",
"IIIIIIEIBIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIEIBIIIIII",
"IIIIIEEIBBIIIII",
"IIIIEEEIBBBIIII",
"IIIEEEEIBBBBIII",
"IIEEEEEIBBBBBII",
"IEEEEEEIBBBBBBI",
"IIIIIIIIIIIIIII",
"IBBBBBBIEEEEEEI",
"IIBBBBBIEEEEEII",
"IIIBBBBIEEEEIII",
"IIIIBBBIEEEIIII",
"IIIIIBBIEEIIIII",
"IIIIIIBIEIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIEIEIIIIII",
"IIIIIEEIEEIIIII",
"IIIIEEEIEEEIIII",
"IIIEEEEIEEEEIII",
"IIEEEEEIEEEEEII",
"IEEEEEEIEEEEEEI",
"IIIIIIIIIIIIIII",
"IBBBBBBIBBBBBBI",
"IIBBBBBIBBBBBII",
"IIIBBBBIBBBBIII",
"IIIIBBBIBBBIIII",
"IIIIIBBIBBIIIII",
"IIIIIIBIBIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIBIBIIIIII",
"IIIIIBBIBBIIIII",
"IIIIBBBIBBBIIII",
"IIIBBBBIBBBBIII",
"IIBBBBBIBBBBBII",
"IBBBBBBIBBBBBBI",
"IIIIIIIIIIIIIII",
"IBBBBBBIBBBBBBI",
"IIBBBBBIBBBBBII",
"IIIBBBBIBBBBIII",
"IIIIBBBIBBBIIII",
"IIIIIBBIBBIIIII",
"IIIIIIBIBIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIHIIIIIII",
"IIIIIIIHHIIIIII",
"IIIIIIIHHHIIIII",
"IIIIIIIHHHHIIII",
"IIIIIIIHHHHHIII",
"IHHHHHHHHHHHHII",
"IHHHHHHHHHHHHHI",
"IHHHHHHHHHHHHII",
"IIIIIIIHHHHHIII",
"IIIIIIIHHHHIIII",
"IIIIIIIHHHIIIII",
"IIIIIIIHHIIIIII",
"IIIIIIIHIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIHIIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIHHHHHIIIII",
"IIIIHHHHHHHIIII",
"IIIHHHHHHHHHIII",
"IIHHHHHHHHHHHII",
"IHHHHHHHHHHHHHI",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIHIIIIIII",
"IIIIIIHHIIIIIII",
"IIIIIHHHIIIIIII",
"IIIIHHHHIIIIIII",
"IIIHHHHHIIIIIII",
"IIHHHHHHHHHHHHI",
"IHHHHHHHHHHHHHI",
"IIHHHHHHHHHHHHI",
"IIIHHHHHIIIIIII",
"IIIIHHHHIIIIIII",
"IIIIIHHHIIIIIII",
"IIIIIIHHIIIIIII",
"IIIIIIIHIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIHHHIIIIII",
"IHHHHHHHHHHHHHI",
"IIHHHHHHHHHHHII",
"IIIHHHHHHHHHIII",
"IIIIHHHHHHHIIII",
"IIIIIHHHHHIIIII",
"IIIIIIHHHIIIIII",
"IIIIIIIHIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIGIIIIIII",
"IIIIIIIGGIIIIII",
"IIIIIIIGGGIIIII",
"IIIIIIIGGGGIIII",
"IIIIIIIGGGGGIII",
"IGGGGGGGGGGGGII",
"IGGGGGGGGGGGGGI",
"IGGGGGGGGGGGGII",
"IIIIIIIGGGGGIII",
"IIIIIIIGGGGIIII",
"IIIIIIIGGGIIIII",
"IIIIIIIGGIIIIII",
"IIIIIIIGIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIGIIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIGGGGGIIIII",
"IIIIGGGGGGGIIII",
"IIIGGGGGGGGGIII",
"IIGGGGGGGGGGGII",
"IGGGGGGGGGGGGGI",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIGIIIIIII",
"IIIIIIGGIIIIIII",
"IIIIIGGGIIIIIII",
"IIIIGGGGIIIIIII",
"IIIGGGGGIIIIIII",
"IIGGGGGGGGGGGGI",
"IGGGGGGGGGGGGGI",
"IIGGGGGGGGGGGGI",
"IIIGGGGGIIIIIII",
"IIIIGGGGIIIIIII",
"IIIIIGGGIIIIIII",
"IIIIIIGGIIIIIII",
"IIIIIIIGIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIGGGIIIIII",
"IGGGGGGGGGGGGGI",
"IIGGGGGGGGGGGII",
"IIIGGGGGGGGGIII",
"IIIIGGGGGGGIIII",
"IIIIIGGGGGIIIII",
"IIIIIIGGGIIIIII",
"IIIIIIIGIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIEIIIIIII",
"IIIIIIIEEIIIIII",
"IIIIIIIEEEIIIII",
"IIIIIIIEEEEIIII",
"IIIIIIIEEEEEIII",
"IEEEEEEEEEEEEII",
"IEEEEEEEEEEEEEI",
"IEEEEEEEEEEEEII",
"IIIIIIIEEEEEIII",
"IIIIIIIEEEEIIII",
"IIIIIIIEEEIIIII",
"IIIIIIIEEIIIIII",
"IIIIIIIEIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIEIIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIEEEEEIIIII",
"IIIIEEEEEEEIIII",
"IIIEEEEEEEEEIII",
"IIEEEEEEEEEEEII",
"IEEEEEEEEEEEEEI",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIEIIIIIII",
"IIIIIIEEIIIIIII",
"IIIIIEEEIIIIIII",
"IIIIEEEEIIIIIII",
"IIIEEEEEIIIIIII",
"IIEEEEEEEEEEEEI",
"IEEEEEEEEEEEEEI",
"IIEEEEEEEEEEEEI",
"IIIEEEEEIIIIIII",
"IIIIEEEEIIIIIII",
"IIIIIEEEIIIIIII",
"IIIIIIEEIIIIIII",
"IIIIIIIEIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIEEEIIIIII",
"IEEEEEEEEEEEEEI",
"IIEEEEEEEEEEEII",
"IIIEEEEEEEEEIII",
"IIIIEEEEEEEIIII",
"IIIIIEEEEEIIIII",
"IIIIIIEEEIIIIII",
"IIIIIIIEIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIDIIIIIII",
"IIIIIIIDDIIIIII",
"IIIIIIIDDDIIIII",
"IIIIIIIDDDDIIII",
"IIIIIIIDDDDDIII",
"IDDDDDDDDDDDDII",
"IDDDDDDDDDDDDDI",
"IDDDDDDDDDDDDII",
"IIIIIIIDDDDDIII",
"IIIIIIIDDDDIIII",
"IIIIIIIDDDIIIII",
"IIIIIIIDDIIIIII",
"IIIIIIIDIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIDIIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIDDDDDIIIII",
"IIIIDDDDDDDIIII",
"IIIDDDDDDDDDIII",
"IIDDDDDDDDDDDII",
"IDDDDDDDDDDDDDI",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIDIIIIIII",
"IIIIIIDDIIIIIII",
"IIIIIDDDIIIIIII",
"IIIIDDDDIIIIIII",
"IIIDDDDDIIIIIII",
"IIDDDDDDDDDDDDI",
"IDDDDDDDDDDDDDI",
"IIDDDDDDDDDDDDI",
"IIIDDDDDIIIIIII",
"IIIIDDDDIIIIIII",
"IIIIIDDDIIIIIII",
"IIIIIIDDIIIIIII",
"IIIIIIIDIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIDDDIIIIII",
"IDDDDDDDDDDDDDI",
"IIDDDDDDDDDDDII",
"IIIDDDDDDDDDIII",
"IIIIDDDDDDDIIII",
"IIIIIDDDDDIIIII",
"IIIIIIDDDIIIIII",
"IIIIIIIDIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIFIIIIIII",
"IIIIIIFFFIIIIII",
"IIIIIFFFFFIIIII",
"IIIIFFFFFFFIIII",
"IIIFFFFIFFFFIII",
"IIFFFFIIIFFFFII",
"IFFFFIIIIIFFFFI",
"IIFFFFIIIFFFFII",
"IIIFFFFIFFFFIII",
"IIIIFFFFFFFIIII",
"IIIIIFFFFFIIIII",
"IIIIIIFFFIIIIII",
"IIIIIIIFIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIICIIIIIII",
"IIIIIICCCIIIIII",
"IIIIICCCCCIIIII",
"IIIICCCCCCCIIII",
"IIICCCCICCCCIII",
"IICCCCIIICCCCII",
"ICCCCIIIIICCCCI",
"IICCCCIIICCCCII",
"IIICCCCICCCCIII",
"IIIICCCCCCCIIII",
"IIIIICCCCCIIIII",
"IIIIIICCCIIIIII",
"IIIIIIICIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIBIIIIIII",
"IIIIIIBBBIIIIII",
"IIIIIBBBBBIIIII",
"IIIIBBBBBBBIIII",
"IIIBBBBBBBBBIII",
"IIBBBBIIIBBBBII",
"IBBBBBIIIBBBBBI",
"IIBBBBIIIBBBBII",
"IIIBBBBBBBBBIII",
"IIIIBBBBBBBIIII",
"IIIIIBBBBBIIIII",
"IIIIIIBBBIIIIII",
"IIIIIIIBIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIAIIIIIII",
"IIIIIIAAAIIIIII",
"IIIIIAAAAAIIIII",
"IIIIAAAAAAAIIII",
"IIIAAAAAAAAAIII",
"IIAAAAAAAAAAAII",
"IAAAAAAAAAAAAAI",
"IIAAAAAAAAAAAII",
"IIIAAAAAAAAAIII",
"IIIIAAAAAAAIIII",
"IIIIIAAAAAIIIII",
"IIIIIIAAAIIIIII",
"IIIIIIIAIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIAIIIIIII",
"IIIIIIAAAIIIIII",
"IIIIIAIIIAIIIII",
"IIIIAAIIIAAIIII",
"IIIAAAIIIAAAIII",
"IIAAAAIIIAAAAII",
"IAAAAAIIIAAAAAI",
"IIAAAAIIIAAAAII",
"IIIAAAIIIAAAIII",
"IIIIAAIIIAAIIII",
"IIIIIAIIIAIIIII",
"IIIIIIAAAIIIIII",
"IIIIIIIAIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIAIIIIIII",
"IIIIIIAAAIIIIII",
"IIIIIAAAAAIIIII",
"IIIIAAAAAAAIIII",
"IIIAAAAAAAAAIII",
"IIAIIIIIIIIIAII",
"IAAIIIIIIIIIAAI",
"IIAIIIIIIIIIAII",
"IIIAAAAAAAAAIII",
"IIIIAAAAAAAIIII",
"IIIIIAAAAAIIIII",
"IIIIIIAAAIIIIII",
"IIIIIIIAIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIIIIIIIII",
"IIIIIIIAIIIIIII",
"IIIIIIAAAIIIIII",
"IIIIIAAAAAIIIII",
"IIIIAIAAAIAIIII",
"IIIAIIIAIIIAIII",
"IIAAAIIIIIAAAII",
"IAAAAAIIIAAAAAI",
"IIAAAIIIIIAAAII",
"IIIAIIIAIIIAIII",
"IIIIAIAAAIAIIII",
"IIIIIAAAAAIIIII",
"IIIIIIAAAIIIIII",
"IIIIIIIAIIIIIII",
"IIIIIIIIIIIIIII"
};

char** jvnalgo::GetIconData(int size) {
   if (size == 7) return jvn7x7;
   if (size == 15) return jvn15x15;
   return NULL;
}

int jvnalgo::NumCellStates() {
   //!!! return 29 or 32 depending on current rule (jvn or ejvn)
   return 29;
}
