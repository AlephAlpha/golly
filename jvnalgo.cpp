                        /*** /

This file is part of Golly, a Game of Life Simulator.
Copyright (C) 2008 Andrew Trevorrow and Tomas Rokicki.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

 Web site:  http://sourceforge.net/projects/golly
 Authors:   rokicki@gmail.com  andrew@trevorrow.com

                        / ***/
#include "jvnalgo.h"

// AKT: for case-insensitive string comparison
#include <string.h>
#ifndef WIN32
   #define stricmp strcasecmp
#endif

using namespace std ;

// AKT: this algo only supports 2 rules
const char JVN_RULE[] = "JvN-29";
const char EJVN_RULE[] = "JvN-32";

static int numstates = 29;   // 29 or 32

int jvnalgo::NumCellStates() {
   return numstates;
}

const char* jvnalgo::setrule(const char *s) {
   if (stricmp(s, JVN_RULE) == 0) {
      numstates = 29;
      maxCellStates = 29 ;
      ghashbase::setrule(s) ;
      return NULL;
   } else if (stricmp(s, EJVN_RULE) == 0) {
      numstates = 32;
      maxCellStates = 32 ;
      ghashbase::setrule(s) ;
      return NULL;
   }
   return "This algorithm only supports two rules (JvN-29 or JvN-32).";
}

const char* jvnalgo::getrule() {
   if (numstates == 29) return JVN_RULE;
   if (numstates == 32) return EJVN_RULE;
   return "Bug in jvnalgo::getrule!";
}

const int NORTH = 1 ;
const int SOUTH = 3 ;
const int EAST = 0 ;
const int WEST = 2 ;
const int FLIPDIR = 2 ;
const int DIRMASK = 3 ;
const int CONF = 0x10 ;
const int OTRANS = 0x20 ;
const int STRANS = 0x40 ;
const int TEXC = 0x80 ;
const int CDEXC = 0x80 ;
const int CROSSEXC = 6 ;
const int CEXC = 1 ;
const int BIT_ONEXC = 1 ;
const int BIT_OEXC_EW = 2 ;
const int BIT_OEXC_NS = 4 ;
const int BIT_OEXC = BIT_OEXC_NS | BIT_OEXC_EW ;
const int BIT_SEXC = 8 ;
const int BIT_CEXC = 16 ;
const int BIT_NS_IN = 32 ;
const int BIT_EW_IN = 64 ;
const int BIT_NS_OUT = 128 ;
const int BIT_EW_OUT = 256 ;
const int BIT_CROSS = (BIT_NS_IN | BIT_EW_IN | BIT_NS_OUT | BIT_EW_OUT) ;
const int BIT_ANY_OUT = (BIT_NS_OUT | BIT_EW_OUT) ;
const int BIT_OEXC_OTHER = 512 ;
const int BIT_SEXC_OTHER = 1024 ;
static state compress[256] ;

/**
 *   These are the legal *internal* states.
 */
static state uncompress[] = { 0, /* dead */
			      1, 2, 3, 4, 5, 6, 7, 8, /* construction states */
			      32, 33, 34, 35, /* ordinary */
			      160, 161, 162, 163, /* ordinary active */
			      64, 65, 66, 67, /* special */
			      192, 193, 194, 195, /* special active */
			      16, 144, /* confluent states */
			      17, 145, /* more confluent states */
                              146, 148, 150 /* crossing confluent states */
} ;

/**
 *   The behavior of the confluent states under the extended
 *   rules was verified empirically by the wjvn executable,
 *   because I could not interpret the paper sufficiently to
 *   cover some cases I thought were ambiguous, or where the
 *   simulator seemed to contradict the transition rules in the
 *   paper.   -tgr
 */
static int bits(state mcode, state code, state dir) {
   if ((code & (TEXC | OTRANS | STRANS | CONF | CEXC)) == 0)
      return 0 ;
   if (code & CONF) {
      if ((mcode & (OTRANS | STRANS)) && ((mcode & DIRMASK) ^ FLIPDIR) == dir)
         return 0 ;
      if ((code & 2) && !(dir & 1))
         return BIT_CEXC ;
      if ((code & 4) && (dir & 1))
         return BIT_CEXC ;
      if (code & 1)
         return BIT_CEXC ;
      return 0 ;
   }
   if ((code & (OTRANS | STRANS)) == 0)
      return 0 ;
   int r = 0 ;
   if ((code & DIRMASK) == dir) {
      if (code & OTRANS) {
         if (dir & 1) {
           r |= BIT_NS_IN ;
           if (code & TEXC)
             r |= BIT_OEXC_NS ;
           else
             r |= BIT_ONEXC ;
         } else {
           r |= BIT_EW_IN ;
           if (code & TEXC)
             r |= BIT_OEXC_EW ;
           else
             r |= BIT_ONEXC ;
         }
      } else if ((code & (STRANS | TEXC)) == (STRANS | TEXC))
         r |= BIT_SEXC ;
      if ((mcode & (OTRANS | STRANS)) && (dir ^ (mcode & DIRMASK)) == 2) {
         // don't permit these bits to propogate; head to head
      } else {
        if (r & BIT_OEXC)
           r |= BIT_OEXC_OTHER ;
        if (r & BIT_SEXC)
           r |= BIT_SEXC_OTHER ;
      }
   } else {
      if (dir & 1)
         r |= BIT_NS_OUT ;
      else
         r |= BIT_EW_OUT ;
   }
   return r ;
}

static state cres[] = {0x22, 0x23, 0x40, 0x41, 0x42, 0x43, 0x10, 0x20, 0x21} ;

jvnalgo::jvnalgo() {
  for (int i=0; i<256; i++)
    compress[i] = 255 ;
  for (unsigned int i=0; i<sizeof(uncompress)/sizeof(uncompress[0]); i++)
     compress[uncompress[i]] = (state)i ;
  maxCellStates = numstates ;
}

jvnalgo::~jvnalgo() {
}

state jvnalgo::slowcalc(state, state n, state, state w, state c, state e,
			state, state s, state) {
   c = uncompress[c] ;
   int mbits = bits(c, uncompress[n], SOUTH) |
     bits(c, uncompress[w], EAST) |
     bits(c, uncompress[e], WEST) |
     bits(c, uncompress[s], NORTH) ;
   if (c < CONF) {
      if (mbits & (BIT_OEXC | BIT_SEXC))
         c = 2 * c + 1 ;
      else
         c = 2 * c ;
      if (c > 8)
         c = cres[c-9] ;
   } else if (c & CONF) {
      if (mbits & BIT_SEXC)
         c = 0 ;
      else if (numstates == 32 && (mbits & BIT_CROSS) == BIT_CROSS) {
         if (mbits & BIT_OEXC)
            c = (mbits & BIT_OEXC) + CONF + 0x80 ;
         else
            c = CONF ;
      } else {
         if (c & CROSSEXC) {// was a cross, is no more
            c = (c & ~(CROSSEXC | CDEXC)) ;
         }
         if ((mbits & BIT_OEXC) && !(mbits & BIT_ONEXC))
            c = ((c & CDEXC) >> 7) + (CDEXC | CONF) ;
         else if ((mbits & BIT_ANY_OUT) || numstates == 29)
            c = ((c & CDEXC) >> 7) + CONF ;
         else
            /* no change */ ;
      }
   } else {
      if (((c & OTRANS) && (mbits & BIT_SEXC)) ||
          ((c & STRANS) && (mbits & BIT_OEXC)))
         c = 0 ;
      else if (mbits & (BIT_SEXC_OTHER | BIT_OEXC_OTHER | BIT_CEXC))
         c |= 128 ;
      else
         c &= 127 ;
   }
   return compress[c] ;
}

// XPM data for the 32 7x7 icons used in JvN algo
static char* jvn7x7[] = {
// width height ncolors chars_per_pixel
"7 217 26 1",
// colors
"A c #000000000000",    // black will become transparent
"B c #FFFF00000000",
"C c #FFFFFFFF0000",
"D c #FFFFFFFF8080",
"E c #0000FFFF8080",
"F c #FFFF80804040",
"G c #1B1BB0B01B1B",
"H c #2424EBEB2424",
"I c #4949FFFF4949",
"J c #6A6AFFFF6A6A",
"K c #59595959FFFF",
"L c #6A6A6A6AFFFF",
"M c #7A7A7A7AFFFF",
"N c #8B8B8B8BFFFF",
"O c #B9B93838FFFF",
"P c #BFBF4949FFFF",
"Q c #C5C55959FFFF",
"R c #CBCB6A6AFFFF",
"S c #151589898989",
"T c #18189C9C9C9C",
"U c #1B1BB0B0B0B0",
"V c #2121D7D7D7D7",
"W c #EBEB24242424",
"X c #FFFF38383838",
"Y c #FFFF49494949",
"Z c #FFFF59595959",
// pixels
"AABBBAA",
"ABBBBBA",
"BBBBBBB",
"BBBBBBB",
"BBBBBBB",
"ABBBBBA",
"AABBBAA",
"AACCCAA",
"ACCCCCA",
"CCCCCCC",
"AAAAAAA",
"BBBBBBB",
"ABBBBBA",
"AABBBAA",
"AABBBAA",
"ABBBBBA",
"BBBBBBB",
"AAAAAAA",
"CCCCCCC",
"ACCCCCA",
"AACCCAA",
"AACACAA",
"ACCACCA",
"CCCACCC",
"AAAAAAA",
"BBBABBB",
"ABBABBA",
"AABABAA",
"AACABAA",
"ACCABBA",
"CCCABBB",
"AAAAAAA",
"BBBACCC",
"ABBACCA",
"AABACAA",
"AABACAA",
"ABBACCA",
"BBBACCC",
"AAAAAAA",
"CCCABBB",
"ACCABBA",
"AACABAA",
"AABABAA",
"ABBABBA",
"BBBABBB",
"AAAAAAA",
"CCCACCC",
"ACCACCA",
"AACACAA",
"AACACAA",
"ACCACCA",
"CCCACCC",
"AAAAAAA",
"CCCACCC",
"ACCACCA",
"AACACAA",
"AAAAAAA",
"AAAAKAA",
"AAAAKKA",
"KKKKKKK",
"AAAAKKA",
"AAAAKAA",
"AAAAAAA",
"AAALAAA",
"AALLLAA",
"ALLLLLA",
"AAALAAA",
"AAALAAA",
"AAALAAA",
"AAALAAA",
"AAAAAAA",
"AAMAAAA",
"AMMAAAA",
"MMMMMMM",
"AMMAAAA",
"AAMAAAA",
"AAAAAAA",
"AAANAAA",
"AAANAAA",
"AAANAAA",
"AAANAAA",
"ANNNNNA",
"AANNNAA",
"AAANAAA",
"AAAAAAA",
"AAAAGAA",
"AAAAGGA",
"GGGGGGG",
"AAAAGGA",
"AAAAGAA",
"AAAAAAA",
"AAAHAAA",
"AAHHHAA",
"AHHHHHA",
"AAAHAAA",
"AAAHAAA",
"AAAHAAA",
"AAAHAAA",
"AAAAAAA",
"AAIAAAA",
"AIIAAAA",
"IIIIIII",
"AIIAAAA",
"AAIAAAA",
"AAAAAAA",
"AAAJAAA",
"AAAJAAA",
"AAAJAAA",
"AAAJAAA",
"AJJJJJA",
"AAJJJAA",
"AAAJAAA",
"AAAAAAA",
"AAAAWAA",
"AAAAWWA",
"WWWWWWW",
"AAAAWWA",
"AAAAWAA",
"AAAAAAA",
"AAAXAAA",
"AAXXXAA",
"AXXXXXA",
"AAAXAAA",
"AAAXAAA",
"AAAXAAA",
"AAAXAAA",
"AAAAAAA",
"AAYAAAA",
"AYYAAAA",
"YYYYYYY",
"AYYAAAA",
"AAYAAAA",
"AAAAAAA",
"AAAZAAA",
"AAAZAAA",
"AAAZAAA",
"AAAZAAA",
"AZZZZZA",
"AAZZZAA",
"AAAZAAA",
"AAAAAAA",
"AAAAOAA",
"AAAAOOA",
"OOOOOOO",
"AAAAOOA",
"AAAAOAA",
"AAAAAAA",
"AAAPAAA",
"AAPPPAA",
"APPPPPA",
"AAAPAAA",
"AAAPAAA",
"AAAPAAA",
"AAAPAAA",
"AAAAAAA",
"AAQAAAA",
"AQQAAAA",
"QQQQQQQ",
"AQQAAAA",
"AAQAAAA",
"AAAAAAA",
"AAARAAA",
"AAARAAA",
"AAARAAA",
"AAARAAA",
"ARRRRRA",
"AARRRAA",
"AAARAAA",
"AAAEAAA",
"AAEEEAA",
"AEEAEEA",
"EEAAAEE",
"AEEAEEA",
"AAEEEAA",
"AAAEAAA",
"AAAFAAA",
"AAFFFAA",
"AFFAFFA",
"FFAAAFF",
"AFFAFFA",
"AAFFFAA",
"AAAFAAA",
"AAADAAA",
"AADDDAA",
"ADDDDDA",
"DDDADDD",
"ADDDDDA",
"AADDDAA",
"AAADAAA",
"AAAVAAA",
"AAVVVAA",
"AVVVVVA",
"VVVVVVV",
"AVVVVVA",
"AAVVVAA",
"AAAVAAA",
"AAAUAAA",
"AAUAUAA",
"AUUAUUA",
"UUUAUUU",
"AUUAUUA",
"AAUAUAA",
"AAAUAAA",
"AAATAAA",
"AATTTAA",
"ATTTTTA",
"TAAAAAT",
"ATTTTTA",
"AATTTAA",
"AAATAAA",
"AAASAAA",
"AASSSAA",
"ASASASA",
"SSSASSS",
"ASASASA",
"AASSSAA",
"AAASAAA"};

// XPM data for the 32 15x15 icons used in JvN algo
static char *jvn15x15[] = {
// width height ncolors chars_per_pixel
"15 465 26 1",
// colors
"A c #000000000000",    // black will become transparent
"B c #FFFF00000000",
"C c #FFFFFFFF0000",
"D c #FFFFFFFF8080",
"E c #0000FFFF8080",
"F c #FFFF80804040",
"G c #1B1BB0B01B1B",
"H c #2424EBEB2424",
"I c #4949FFFF4949",
"J c #6A6AFFFF6A6A",
"K c #59595959FFFF",
"L c #6A6A6A6AFFFF",
"M c #7A7A7A7AFFFF",
"N c #8B8B8B8BFFFF",
"O c #B9B93838FFFF",
"P c #BFBF4949FFFF",
"Q c #C5C55959FFFF",
"R c #CBCB6A6AFFFF",
"S c #151589898989",
"T c #18189C9C9C9C",
"U c #1B1BB0B0B0B0",
"V c #2121D7D7D7D7",
"W c #EBEB24242424",
"X c #FFFF38383838",
"Y c #FFFF49494949",
"Z c #FFFF59595959",
// pixels
"AAAAAAAAAAAAAAA",
"AAAAAABBBAAAAAA",
"AAAABBBBBBBAAAA",
"AAABBBBBBBBBAAA",
"AABBBBBBBBBBBAA",
"AABBBBBBBBBBBAA",
"ABBBBBBBBBBBBBA",
"ABBBBBBBBBBBBBA",
"ABBBBBBBBBBBBBA",
"AABBBBBBBBBBBAA",
"AABBBBBBBBBBBAA",
"AAABBBBBBBBBAAA",
"AAAABBBBBBBAAAA",
"AAAAAABBBAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAACCCAAAAAA",
"AAAAACCCCCAAAAA",
"AAAACCCCCCCAAAA",
"AAACCCCCCCCCAAA",
"AACCCCCCCCCCCAA",
"ACCCCCCCCCCCCCA",
"AAAAAAAAAAAAAAA",
"ABBBBBBBBBBBBBA",
"AABBBBBBBBBBBAA",
"AAABBBBBBBBBAAA",
"AAAABBBBBBBAAAA",
"AAAAABBBBBAAAAA",
"AAAAAABBBAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAABBBAAAAAA",
"AAAAABBBBBAAAAA",
"AAAABBBBBBBAAAA",
"AAABBBBBBBBBAAA",
"AABBBBBBBBBBBAA",
"ABBBBBBBBBBBBBA",
"AAAAAAAAAAAAAAA",
"ACCCCCCCCCCCCCA",
"AACCCCCCCCCCCAA",
"AAACCCCCCCCCAAA",
"AAAACCCCCCCAAAA",
"AAAAACCCCCAAAAA",
"AAAAAACCCAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAACACAAAAAA",
"AAAAACCACCAAAAA",
"AAAACCCACCCAAAA",
"AAACCCCACCCCAAA",
"AACCCCCACCCCCAA",
"ACCCCCCACCCCCCA",
"AAAAAAAAAAAAAAA",
"ABBBBBBABBBBBBA",
"AABBBBBABBBBBAA",
"AAABBBBABBBBAAA",
"AAAABBBABBBAAAA",
"AAAAABBABBAAAAA",
"AAAAAABABAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAACABAAAAAA",
"AAAAACCABBAAAAA",
"AAAACCCABBBAAAA",
"AAACCCCABBBBAAA",
"AACCCCCABBBBBAA",
"ACCCCCCABBBBBBA",
"AAAAAAAAAAAAAAA",
"ABBBBBBACCCCCCA",
"AABBBBBACCCCCAA",
"AAABBBBACCCCAAA",
"AAAABBBACCCAAAA",
"AAAAABBACCAAAAA",
"AAAAAABACAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAABACAAAAAA",
"AAAAABBACCAAAAA",
"AAAABBBACCCAAAA",
"AAABBBBACCCCAAA",
"AABBBBBACCCCCAA",
"ABBBBBBACCCCCCA",
"AAAAAAAAAAAAAAA",
"ACCCCCCABBBBBBA",
"AACCCCCABBBBBAA",
"AAACCCCABBBBAAA",
"AAAACCCABBBAAAA",
"AAAAACCABBAAAAA",
"AAAAAACABAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAABABAAAAAA",
"AAAAABBABBAAAAA",
"AAAABBBABBBAAAA",
"AAABBBBABBBBAAA",
"AABBBBBABBBBBAA",
"ABBBBBBABBBBBBA",
"AAAAAAAAAAAAAAA",
"ACCCCCCACCCCCCA",
"AACCCCCACCCCCAA",
"AAACCCCACCCCAAA",
"AAAACCCACCCAAAA",
"AAAAACCACCAAAAA",
"AAAAAACACAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAACACAAAAAA",
"AAAAACCACCAAAAA",
"AAAACCCACCCAAAA",
"AAACCCCACCCCAAA",
"AACCCCCACCCCCAA",
"ACCCCCCACCCCCCA",
"AAAAAAAAAAAAAAA",
"ACCCCCCACCCCCCA",
"AACCCCCACCCCCAA",
"AAACCCCACCCCAAA",
"AAAACCCACCCAAAA",
"AAAAACCACCAAAAA",
"AAAAAACACAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAKAAAAAAA",
"AAAAAAAKKAAAAAA",
"AAAAAAAKKKAAAAA",
"AAAAAAAKKKKAAAA",
"AAAAAAAKKKKKAAA",
"AKKKKKKKKKKKKAA",
"AKKKKKKKKKKKKKA",
"AKKKKKKKKKKKKAA",
"AAAAAAAKKKKKAAA",
"AAAAAAAKKKKAAAA",
"AAAAAAAKKKAAAAA",
"AAAAAAAKKAAAAAA",
"AAAAAAAKAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAALAAAAAAA",
"AAAAAALLLAAAAAA",
"AAAAALLLLLAAAAA",
"AAAALLLLLLLAAAA",
"AAALLLLLLLLLAAA",
"AALLLLLLLLLLLAA",
"ALLLLLLLLLLLLLA",
"AAAAAALLLAAAAAA",
"AAAAAALLLAAAAAA",
"AAAAAALLLAAAAAA",
"AAAAAALLLAAAAAA",
"AAAAAALLLAAAAAA",
"AAAAAALLLAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAMAAAAAAA",
"AAAAAAMMAAAAAAA",
"AAAAAMMMAAAAAAA",
"AAAAMMMMAAAAAAA",
"AAAMMMMMAAAAAAA",
"AAMMMMMMMMMMMMA",
"AMMMMMMMMMMMMMA",
"AAMMMMMMMMMMMMA",
"AAAMMMMMAAAAAAA",
"AAAAMMMMAAAAAAA",
"AAAAAMMMAAAAAAA",
"AAAAAAMMAAAAAAA",
"AAAAAAAMAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAANNNAAAAAA",
"AAAAAANNNAAAAAA",
"AAAAAANNNAAAAAA",
"AAAAAANNNAAAAAA",
"AAAAAANNNAAAAAA",
"AAAAAANNNAAAAAA",
"ANNNNNNNNNNNNNA",
"AANNNNNNNNNNNAA",
"AAANNNNNNNNNAAA",
"AAAANNNNNNNAAAA",
"AAAAANNNNNAAAAA",
"AAAAAANNNAAAAAA",
"AAAAAAANAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAGAAAAAAA",
"AAAAAAAGGAAAAAA",
"AAAAAAAGGGAAAAA",
"AAAAAAAGGGGAAAA",
"AAAAAAAGGGGGAAA",
"AGGGGGGGGGGGGAA",
"AGGGGGGGGGGGGGA",
"AGGGGGGGGGGGGAA",
"AAAAAAAGGGGGAAA",
"AAAAAAAGGGGAAAA",
"AAAAAAAGGGAAAAA",
"AAAAAAAGGAAAAAA",
"AAAAAAAGAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAHAAAAAAA",
"AAAAAAHHHAAAAAA",
"AAAAAHHHHHAAAAA",
"AAAAHHHHHHHAAAA",
"AAAHHHHHHHHHAAA",
"AAHHHHHHHHHHHAA",
"AHHHHHHHHHHHHHA",
"AAAAAAHHHAAAAAA",
"AAAAAAHHHAAAAAA",
"AAAAAAHHHAAAAAA",
"AAAAAAHHHAAAAAA",
"AAAAAAHHHAAAAAA",
"AAAAAAHHHAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAIAAAAAAA",
"AAAAAAIIAAAAAAA",
"AAAAAIIIAAAAAAA",
"AAAAIIIIAAAAAAA",
"AAAIIIIIAAAAAAA",
"AAIIIIIIIIIIIIA",
"AIIIIIIIIIIIIIA",
"AAIIIIIIIIIIIIA",
"AAAIIIIIAAAAAAA",
"AAAAIIIIAAAAAAA",
"AAAAAIIIAAAAAAA",
"AAAAAAIIAAAAAAA",
"AAAAAAAIAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAJJJAAAAAA",
"AAAAAAJJJAAAAAA",
"AAAAAAJJJAAAAAA",
"AAAAAAJJJAAAAAA",
"AAAAAAJJJAAAAAA",
"AAAAAAJJJAAAAAA",
"AJJJJJJJJJJJJJA",
"AAJJJJJJJJJJJAA",
"AAAJJJJJJJJJAAA",
"AAAAJJJJJJJAAAA",
"AAAAAJJJJJAAAAA",
"AAAAAAJJJAAAAAA",
"AAAAAAAJAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAWAAAAAAA",
"AAAAAAAWWAAAAAA",
"AAAAAAAWWWAAAAA",
"AAAAAAAWWWWAAAA",
"AAAAAAAWWWWWAAA",
"AWWWWWWWWWWWWAA",
"AWWWWWWWWWWWWWA",
"AWWWWWWWWWWWWAA",
"AAAAAAAWWWWWAAA",
"AAAAAAAWWWWAAAA",
"AAAAAAAWWWAAAAA",
"AAAAAAAWWAAAAAA",
"AAAAAAAWAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAXAAAAAAA",
"AAAAAAXXXAAAAAA",
"AAAAAXXXXXAAAAA",
"AAAAXXXXXXXAAAA",
"AAAXXXXXXXXXAAA",
"AAXXXXXXXXXXXAA",
"AXXXXXXXXXXXXXA",
"AAAAAAXXXAAAAAA",
"AAAAAAXXXAAAAAA",
"AAAAAAXXXAAAAAA",
"AAAAAAXXXAAAAAA",
"AAAAAAXXXAAAAAA",
"AAAAAAXXXAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAYAAAAAAA",
"AAAAAAYYAAAAAAA",
"AAAAAYYYAAAAAAA",
"AAAAYYYYAAAAAAA",
"AAAYYYYYAAAAAAA",
"AAYYYYYYYYYYYYA",
"AYYYYYYYYYYYYYA",
"AAYYYYYYYYYYYYA",
"AAAYYYYYAAAAAAA",
"AAAAYYYYAAAAAAA",
"AAAAAYYYAAAAAAA",
"AAAAAAYYAAAAAAA",
"AAAAAAAYAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAZZZAAAAAA",
"AAAAAAZZZAAAAAA",
"AAAAAAZZZAAAAAA",
"AAAAAAZZZAAAAAA",
"AAAAAAZZZAAAAAA",
"AAAAAAZZZAAAAAA",
"AZZZZZZZZZZZZZA",
"AAZZZZZZZZZZZAA",
"AAAZZZZZZZZZAAA",
"AAAAZZZZZZZAAAA",
"AAAAAZZZZZAAAAA",
"AAAAAAZZZAAAAAA",
"AAAAAAAZAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAOAAAAAAA",
"AAAAAAAOOAAAAAA",
"AAAAAAAOOOAAAAA",
"AAAAAAAOOOOAAAA",
"AAAAAAAOOOOOAAA",
"AOOOOOOOOOOOOAA",
"AOOOOOOOOOOOOOA",
"AOOOOOOOOOOOOAA",
"AAAAAAAOOOOOAAA",
"AAAAAAAOOOOAAAA",
"AAAAAAAOOOAAAAA",
"AAAAAAAOOAAAAAA",
"AAAAAAAOAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAPAAAAAAA",
"AAAAAAPPPAAAAAA",
"AAAAAPPPPPAAAAA",
"AAAAPPPPPPPAAAA",
"AAAPPPPPPPPPAAA",
"AAPPPPPPPPPPPAA",
"APPPPPPPPPPPPPA",
"AAAAAAPPPAAAAAA",
"AAAAAAPPPAAAAAA",
"AAAAAAPPPAAAAAA",
"AAAAAAPPPAAAAAA",
"AAAAAAPPPAAAAAA",
"AAAAAAPPPAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAQAAAAAAA",
"AAAAAAQQAAAAAAA",
"AAAAAQQQAAAAAAA",
"AAAAQQQQAAAAAAA",
"AAAQQQQQAAAAAAA",
"AAQQQQQQQQQQQQA",
"AQQQQQQQQQQQQQA",
"AAQQQQQQQQQQQQA",
"AAAQQQQQAAAAAAA",
"AAAAQQQQAAAAAAA",
"AAAAAQQQAAAAAAA",
"AAAAAAQQAAAAAAA",
"AAAAAAAQAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAARRRAAAAAA",
"AAAAAARRRAAAAAA",
"AAAAAARRRAAAAAA",
"AAAAAARRRAAAAAA",
"AAAAAARRRAAAAAA",
"AAAAAARRRAAAAAA",
"ARRRRRRRRRRRRRA",
"AARRRRRRRRRRRAA",
"AAARRRRRRRRRAAA",
"AAAARRRRRRRAAAA",
"AAAAARRRRRAAAAA",
"AAAAAARRRAAAAAA",
"AAAAAAARAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAEAAAAAAA",
"AAAAAAEEEAAAAAA",
"AAAAAEEEEEAAAAA",
"AAAAEEEEEEEAAAA",
"AAAEEEEAEEEEAAA",
"AAEEEEAAAEEEEAA",
"AEEEEAAAAAEEEEA",
"AAEEEEAAAEEEEAA",
"AAAEEEEAEEEEAAA",
"AAAAEEEEEEEAAAA",
"AAAAAEEEEEAAAAA",
"AAAAAAEEEAAAAAA",
"AAAAAAAEAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAFAAAAAAA",
"AAAAAAFFFAAAAAA",
"AAAAAFFFFFAAAAA",
"AAAAFFFFFFFAAAA",
"AAAFFFFAFFFFAAA",
"AAFFFFAAAFFFFAA",
"AFFFFAAAAAFFFFA",
"AAFFFFAAAFFFFAA",
"AAAFFFFAFFFFAAA",
"AAAAFFFFFFFAAAA",
"AAAAAFFFFFAAAAA",
"AAAAAAFFFAAAAAA",
"AAAAAAAFAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAADAAAAAAA",
"AAAAAADDDAAAAAA",
"AAAAADDDDDAAAAA",
"AAAADDDDDDDAAAA",
"AAADDDDDDDDDAAA",
"AADDDDAAADDDDAA",
"ADDDDDAAADDDDDA",
"AADDDDAAADDDDAA",
"AAADDDDDDDDDAAA",
"AAAADDDDDDDAAAA",
"AAAAADDDDDAAAAA",
"AAAAAADDDAAAAAA",
"AAAAAAADAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAVAAAAAAA",
"AAAAAAVVVAAAAAA",
"AAAAAVVVVVAAAAA",
"AAAAVVVVVVVAAAA",
"AAAVVVVVVVVVAAA",
"AAVVVVVVVVVVVAA",
"AVVVVVVVVVVVVVA",
"AAVVVVVVVVVVVAA",
"AAAVVVVVVVVVAAA",
"AAAAVVVVVVVAAAA",
"AAAAAVVVVVAAAAA",
"AAAAAAVVVAAAAAA",
"AAAAAAAVAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAUAAAAAAA",
"AAAAAAUUUAAAAAA",
"AAAAAUAAAUAAAAA",
"AAAAUUAAAUUAAAA",
"AAAUUUAAAUUUAAA",
"AAUUUUAAAUUUUAA",
"AUUUUUAAAUUUUUA",
"AAUUUUAAAUUUUAA",
"AAAUUUAAAUUUAAA",
"AAAAUUAAAUUAAAA",
"AAAAAUAAAUAAAAA",
"AAAAAAUUUAAAAAA",
"AAAAAAAUAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAATAAAAAAA",
"AAAAAATTTAAAAAA",
"AAAAATTTTTAAAAA",
"AAAATTTTTTTAAAA",
"AAATTTTTTTTTAAA",
"AATAAAAAAAAATAA",
"ATTAAAAAAAAATTA",
"AATAAAAAAAAATAA",
"AAATTTTTTTTTAAA",
"AAAATTTTTTTAAAA",
"AAAAATTTTTAAAAA",
"AAAAAATTTAAAAAA",
"AAAAAAATAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAA",
"AAAAAAASAAAAAAA",
"AAAAAASSSAAAAAA",
"AAAAASSSSSAAAAA",
"AAAASASSSASAAAA",
"AAASAAASAAASAAA",
"AASSSAAAAASSSAA",
"ASSSSSAAASSSSSA",
"AASSSAAAAASSSAA",
"AAASAAASAAASAAA",
"AAAASASSSASAAAA",
"AAAAASSSSSAAAAA",
"AAAAAASSSAAAAAA",
"AAAAAAASAAAAAAA",
"AAAAAAAAAAAAAAA"};

// colors for each cell state (we try to match colors used in icons)
static unsigned char jvncolors[] = {
     0,   0,   0,    // not used (replaced by user's dead cell color)
   255,   0,   0,    // 1  red
   255, 125,   0,    // 2  orange (to match red and yellow)
   255, 150,  25,    // 3   lighter
   255, 175,  50,    // 4    lighter
   255, 200,  75,    // 5     lighter
   255, 225, 100,    // 6      lighter
   255, 250, 125,    // 7       lighter
   251, 255,   0,    // 8  yellow
    89,  89, 255,    // 9  blue
   106, 106, 255,    // 10  lighter
   122, 122, 255,    // 11   lighter
   139, 139, 255,    // 12    lighter
    27, 176,  27,    // 13 green
    36, 200,  36,    // 14  lighter
    73, 255,  73,    // 15   lighter
   106, 255, 106,    // 16    lighter
   235,  36,  36,    // 17 red
   255,  56,  56,    // 18  lighter
   255,  73,  73,    // 19   lighter
   255,  89,  89,    // 20    lighter
   185,  56, 255,    // 21 purple
   191,  73, 255,    // 22  lighter
   197,  89, 255,    // 23   lighter
   203, 106, 255,    // 24    lighter
     0, 255, 128,    // 25 light green
   255, 128,  64,    // 26 light orange
   255, 255, 128,    // 27 light yellow
    33, 215, 215,    // 28 cyan
    27, 176, 176,    // 29  darker
    24, 156, 156,    // 30   darker
    21, 137, 137     // 31    darker
};
static lifealgo *creator() { return new jvnalgo() ; }
void jvnalgo::doInitializeAlgoInfo(staticAlgoInfo &ai) {
   ghashbase::doInitializeAlgoInfo(ai) ;
   ai.setAlgorithmName("JvN") ;
   ai.setAlgorithmCreator(&creator) ;
   ai.initCellColors(sizeof(jvncolors)/(sizeof(jvncolors[0])*3), jvncolors) ;
   ai.createIconBitmaps(7, jvn7x7) ;
   ai.createIconBitmaps(15, jvn15x15) ;
   ai.setStatusRGB(225, 255, 225) ;    // pale green
}

