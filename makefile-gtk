# Makefile for GTK version of Golly using wxWidgets.
# It assumes you've built and installed wxWidgets with commands like these:
#
# cd <wx-install-dir>
# mkdir buildgtk
# cd buildgtk
# ../configure --with-gtk --disable-shared
# make
# su
# make install
# ldconfig

VERSION = 1.2
RELEASENAME = golly-$(VERSION)
SHAREDFILES = Help Patterns Scripts README LICENSE
SRCFILES = BUILD TODO CHANGES makefile-gtk makefile-x11 makefile-mac makefile-win \
   bitmaps golly.rc *.ico appicon.xpm Info.plist.in app.icns *.h *.cpp
BINFILES = golly bgolly

CXXC = g++
CXXFLAGS = `wx-config --cxxflags` -O5 -Wall -DZLIB -DVERSION=$(VERSION)
LDFLAGS = `wx-config --libs` -lz

PYTHON_INCLUDE = -I`python -c "import distutils.sysconfig; print distutils.sysconfig.get_python_inc()"`
# we don't want to link against a specific library: PYTHON_LINK = -lpython2.3
# following generates "-Xlinker -export-dynamic" but doesn't seem to be needed
# PYTHON_LINK = `python -c "import distutils.sysconfig; print distutils.sysconfig.get_config_var('LINKFORSHARED')"`
PYTHON_LINK = 

### put .o files in a GTK-specific subdir to avoid conflict with .o files created by X11 build
OBJDIR = ObjGTK
BASEOBJ = $(OBJDIR)/bigint.o $(OBJDIR)/lifealgo.o $(OBJDIR)/hlifealgo.o $(OBJDIR)/hlifedraw.o \
   $(OBJDIR)/qlifealgo.o $(OBJDIR)/qlifedraw.o $(OBJDIR)/liferender.o $(OBJDIR)/viewport.o \
   $(OBJDIR)/readpattern.o $(OBJDIR)/writepattern.o $(OBJDIR)/liferules.o $(OBJDIR)/util.o \
   $(OBJDIR)/lifepoll.o
WXOBJ = $(OBJDIR)/wxutils.o $(OBJDIR)/wxprefs.o $(OBJDIR)/wxrule.o \
   $(OBJDIR)/wxinfo.o $(OBJDIR)/wxhelp.o $(OBJDIR)/wxstatus.o $(OBJDIR)/wxview.o \
   $(OBJDIR)/wxrender.o $(OBJDIR)/wxscript.o $(OBJDIR)/wxfile.o $(OBJDIR)/wxedit.o \
   $(OBJDIR)/wxcontrol.o $(OBJDIR)/wxlayer.o $(OBJDIR)/wxmain.o $(OBJDIR)/wxgolly.o

all: $(OBJDIR) golly bgolly

$(OBJDIR):
	mkdir -p $(OBJDIR)

clean: 
	rm -f $(OBJDIR)/*.o
	rm -f golly bgolly

golly: $(BASEOBJ) $(WXOBJ)
	$(CXXC) $(CXXFLAGS) -o golly $(BASEOBJ) $(WXOBJ) $(LDFLAGS) $(PYTHON_LINK)

bgolly: $(BASEOBJ) $(OBJDIR)/bgolly.o
	$(CXXC) $(CXXFLAGS) -o bgolly $(BASEOBJ) $(OBJDIR)/bgolly.o $(LDFLAGS)

$(OBJDIR)/bigint.o: bigint.cpp bigint.h util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ bigint.cpp

$(OBJDIR)/lifealgo.o: lifealgo.cpp lifealgo.h bigint.h viewport.h \
liferender.h lifepoll.h readpattern.h
	$(CXXC) $(CXXFLAGS) -c -o $@ lifealgo.cpp

$(OBJDIR)/hlifealgo.o: hlifealgo.cpp hlifealgo.h lifealgo.h bigint.h \
viewport.h liferender.h lifepoll.h readpattern.h liferules.h util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ hlifealgo.cpp

$(OBJDIR)/hlifedraw.o: hlifedraw.cpp hlifealgo.h lifealgo.h bigint.h \
viewport.h liferender.h lifepoll.h readpattern.h liferules.h
	$(CXXC) $(CXXFLAGS) -c -o $@ hlifedraw.cpp

$(OBJDIR)/qlifealgo.o: qlifealgo.cpp qlifealgo.h lifealgo.h bigint.h \
viewport.h liferender.h lifepoll.h readpattern.h liferules.h util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ qlifealgo.cpp

$(OBJDIR)/qlifedraw.o: qlifedraw.cpp qlifealgo.h lifealgo.h bigint.h \
viewport.h liferender.h lifepoll.h readpattern.h liferules.h util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ qlifedraw.cpp

$(OBJDIR)/liferules.o: liferules.cpp liferules.h util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ liferules.cpp

$(OBJDIR)/liferender.o: liferender.cpp liferender.h
	$(CXXC) $(CXXFLAGS) -c -o $@ liferender.cpp

$(OBJDIR)/readpattern.o: readpattern.cpp readpattern.h bigint.h lifealgo.h \
viewport.h liferender.h lifepoll.h util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ readpattern.cpp

$(OBJDIR)/writepattern.o: writepattern.cpp writepattern.h lifealgo.h \
bigint.h viewport.h liferender.h lifepoll.h readpattern.h util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ writepattern.cpp

$(OBJDIR)/util.o: util.cpp util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ util.cpp

$(OBJDIR)/viewport.o: viewport.cpp viewport.h bigint.h lifealgo.h \
liferender.h lifepoll.h readpattern.h
	$(CXXC) $(CXXFLAGS) -c -o $@ viewport.cpp

$(OBJDIR)/lifepoll.o: lifepoll.cpp lifepoll.h util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ lifepoll.cpp

$(OBJDIR)/wxutils.o: wxutils.cpp wxutils.h \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
wxgolly.h wxview.h wxmain.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxutils.cpp

$(OBJDIR)/wxprefs.o: wxprefs.cpp wxprefs.h \
Help/about.html \
bitmaps/zoomin_curs.xpm bitmaps/zoomout_curs.xpm \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
wxgolly.h wxmain.h wxutils.h wxhelp.h wxinfo.h wxlayer.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxprefs.cpp

$(OBJDIR)/wxrule.o: wxrule.cpp wxrule.h \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h liferules.h \
wxgolly.h wxutils.h wxprefs.h wxlayer.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxrule.cpp

$(OBJDIR)/wxinfo.o: wxinfo.cpp wxinfo.h \
readpattern.h bigint.h wxgolly.h wxmain.h wxutils.h wxprefs.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxinfo.cpp

$(OBJDIR)/wxhelp.o: wxhelp.cpp wxhelp.h \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
wxgolly.h wxmain.h wxutils.h wxprefs.h wxscript.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxhelp.cpp

$(OBJDIR)/wxstatus.o: wxstatus.cpp wxstatus.h \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
wxgolly.h wxutils.h wxprefs.h wxview.h wxmain.h wxscript.h wxlayer.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxstatus.cpp

$(OBJDIR)/wxview.o: wxview.cpp wxview.h \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
qlifealgo.h liferules.h hlifealgo.h \
wxgolly.h wxutils.h wxprefs.h wxhelp.h wxmain.h wxstatus.h wxrender.h \
wxscript.h wxlayer.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxview.cpp

$(OBJDIR)/wxrender.o: wxrender.cpp wxrender.h \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
qlifealgo.h liferules.h hlifealgo.h \
wxgolly.h wxutils.h wxprefs.h wxhelp.h wxstatus.h wxview.h wxlayer.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxrender.cpp

$(OBJDIR)/wxscript.o: wxscript.cpp wxscript.h \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
qlifealgo.h liferules.h hlifealgo.h writepattern.h \
wxgolly.h wxmain.h wxview.h wxrender.h wxstatus.h wxutils.h wxprefs.h \
wxinfo.h wxhelp.h wxlayer.h
	$(CXXC) $(CXXFLAGS) $(PYTHON_INCLUDE) -c -o $@ wxscript.cpp

$(OBJDIR)/wxfile.o: wxfile.cpp \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
qlifealgo.h liferules.h hlifealgo.h writepattern.h \
wxgolly.h wxutils.h wxprefs.h wxrule.h wxinfo.h wxstatus.h \
wxview.h wxrender.h wxscript.h wxmain.h wxlayer.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxfile.cpp

$(OBJDIR)/wxedit.o: wxedit.cpp \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
qlifealgo.h liferules.h hlifealgo.h \
wxgolly.h wxutils.h wxprefs.h wxmain.h wxstatus.h wxrender.h wxscript.h wxview.h wxlayer.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxedit.cpp

$(OBJDIR)/wxcontrol.o: wxcontrol.cpp \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
qlifealgo.h liferules.h hlifealgo.h \
wxgolly.h wxutils.h wxprefs.h wxrule.h wxstatus.h wxview.h wxscript.h wxmain.h wxlayer.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxcontrol.cpp

$(OBJDIR)/wxlayer.o: wxlayer.cpp wxlayer.h \
lifealgo.h bigint.h qlifealgo.h hlifealgo.h viewport.h \
wxgolly.h wxmain.h wxview.h wxutils.h wxprefs.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxlayer.cpp

$(OBJDIR)/wxmain.o: wxmain.cpp wxmain.h \
bitmaps/open.xpm bitmaps/save.xpm bitmaps/play.xpm bitmaps/stop.xpm \
bitmaps/hash.xpm bitmaps/draw.xpm bitmaps/select.xpm bitmaps/move.xpm \
bitmaps/info.xpm bitmaps/new.xpm \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
qlifealgo.h liferules.h hlifealgo.h writepattern.h \
wxgolly.h wxutils.h wxprefs.h wxinfo.h wxhelp.h wxstatus.h \
wxview.h wxrender.h wxscript.h wxlayer.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxmain.cpp

$(OBJDIR)/wxgolly.o: wxgolly.cpp wxgolly.h \
Help/about.html appicon.xpm \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h util.h \
wxmain.h wxstatus.h wxview.h wxutils.h wxprefs.h wxscript.h
	$(CXXC) $(CXXFLAGS) -c -o $@ wxgolly.cpp

$(OBJDIR)/bgolly.o: bgolly.cpp \
lifealgo.h bigint.h viewport.h liferender.h lifepoll.h readpattern.h \
hlifealgo.h liferules.h qlifealgo.h writepattern.h util.h
	$(CXXC) $(CXXFLAGS) -c -o $@ bgolly.cpp

srcdist:
	-rm -rf $(RELEASENAME)-src
	mkdir $(RELEASENAME)-src
	cp -rp $(SRCFILES) $(SHAREDFILES) $(RELEASENAME)-src
	find $(RELEASENAME)-src -name CVS | xargs rm -rf
	tar -cf - ./$(RELEASENAME)-src | gzip > $(RELEASENAME)-src.tar.gz

bindist: all
	-rm -rf $(RELEASENAME)-gtk
	mkdir $(RELEASENAME)-gtk
	cp -rp $(BINFILES) $(SHAREDFILES) $(RELEASENAME)-gtk
	find $(RELEASENAME)-gtk -name CVS | xargs rm -rf
	tar -cf - ./$(RELEASENAME)-gtk | gzip > $(RELEASENAME)-gtk.tar.gz
